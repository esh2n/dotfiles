# Directory management
function mkdir_and_change_directory() {
  if [ $# -eq 0 ]; then
    echo "‚ùå Error: Directory name required"
    echo "Usage: mkcd <directory>"
    return 1
  fi

  for dir in "$@"; do
    if [ -d "$dir" ]; then
      echo "‚ö†Ô∏è  Directory '$dir' already exists"
      echo "‚û°Ô∏è  Change to this directory? [Y/n]: "
      read -r response
      case "$response" in
        [nN]*)
          continue
          ;;
        *)
          cd "$dir" || return 1
          echo "‚úÖ Changed to '$dir'"
          return 0
          ;;
      esac
    else
      if mkdir -p "$dir" 2>/dev/null; then
        echo "‚ú® Created directory '$dir'"
        cd "$dir" || return 1
        echo "‚úÖ Changed to '$dir'"
        return 0
      else
        echo "‚ùå Error: Failed to create '$dir'"
        echo "üí° Check directory permissions"
        return 1
      fi
    fi
  done
}

# Vim mode indicator
function zle-line-init zle-keymap-select {
  RPS1="${${KEYMAP/vicmd/-- NORMAL --}/(main|viins)/-- INSERT --}"
  RPS2=${RPS1}
  zle reset-prompt
}

# Fuzzy finder functions
function sk_select_history() {
  BUFFER=$(history -n -r 1 | sk --ansi --reverse --height '50%' --query "$LBUFFER")
  CURSOR=$#BUFFER
  zle clear-screen
}

function sk_select_src () {
  # Áõ¥Êé•ÂÆüË°å„Å®„Ç¶„Ç£„Ç∏„Çß„ÉÉ„ÉàÂëº„Å≥Âá∫„Åó„ÅÆ‰∏°Êñπ„Å´ÂØæÂøú
  if [[ "$1" = "--direct" ]]; then
    # Áõ¥Êé•„Ç≥„Éû„É≥„Éâ„Å®„Åó„Å¶ÂÆüË°åÔºàZLEÈùû‰æùÂ≠òÔºâ
    local direct_mode=1
  elif [[ ! -o zle ]]; then
    # ZLE„ÅåÁÑ°Âäπ„Åß„ÄÅ„Åã„Å§Áõ¥Êé•„Ç≥„Éû„É≥„Éâ„Å®„Åó„Å¶„ÇÇÂÆüË°å„Åï„Çå„Å¶„ÅÑ„Å™„ÅÑÂ†¥Âêà
    echo "sk_select_src„ÇíÁõ¥Êé•ÂÆüË°å„Åó„Åæ„ÅôÔºàZLE„ÅåÁÑ°Âäπ„Å™„Åü„ÇÅÔºâ"
    sk_select_src --direct
    return $?
  fi

  # SIGINTÔºàCtrl+CÔºâ„Éè„É≥„Éâ„É©„ÇíË®≠ÂÆöÔºà‰∏≠Êñ≠ÊôÇ„ÅÆ„Ç¥„Éü„Éï„Ç°„Ç§„É´Âá¶ÁêÜ„ÇíÈò≤Ê≠¢Ôºâ
  # original„ÅÆ„Éè„É≥„Éâ„É©„Çí‰øùÂ≠ò
  local original_sigint_handler=$(trap -p INT)
  
  # Èñ¢Êï∞ÁµÇ‰∫ÜÊôÇ„Å´SIGINT„Éè„É≥„Éâ„É©„ÇíÂÖÉ„Å´Êàª„ÅôÈñ¢Êï∞
  function cleanup() {
    # ÂÖÉ„ÅÆSIGINT„Éè„É≥„Éâ„É©„ÇíÂæ©ÂÖÉÔºàÂ≠òÂú®„Åô„ÇãÂ†¥ÂêàÔºâ
    if [[ -n "$original_sigint_handler" ]]; then
      eval "$original_sigint_handler"
    else
      trap - INT
    fi
    # „Éá„Éê„ÉÉ„Ç∞Áî®„É°„ÉÉ„Çª„Éº„Ç∏„ÇíÁÑ°ÂäπÂåñÔºàÂøÖË¶Å„Å´Âøú„Åò„Å¶„Ç≥„É°„É≥„ÉàËß£Èô§Ôºâ
    # echo "sk_select_src: „ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„ÉóÂÆå‰∫Ü"
  }
  
  # ÁµÇ‰∫ÜÊôÇ„Å´ÂøÖ„Åö„ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„Éó„ÇíÂÆüË°å
  trap cleanup EXIT
  
  # Ctrl+CÊäº‰∏ãÊôÇ„ÅÆÁã¨Ëá™Âá¶ÁêÜÔºà‰∏≠Êñ≠„Çí„Åç„Çå„ÅÑ„Å´Âá¶ÁêÜÔºâ
  trap "cleanup; return 130" INT

  local selected_dir=""
  
  # pacifica„ÇíÂÑ™ÂÖàÁöÑ„Å´‰ΩøÁî®ÔºàWSLÁí∞Â¢É„Åß„ÇÇÔºâ
  if command -v pacifica &>/dev/null; then
    # sk„Ç≥„Éû„É≥„Éâ„ÅÆÂ≠òÂú®Á¢∫Ë™ç
    if ! command -v sk &>/dev/null; then
      echo "„Ç®„É©„Éº: sk„Ç≥„Éû„É≥„Éâ„Åå„Ç§„É≥„Çπ„Éà„Éº„É´„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì"
      echo "WSLÁí∞Â¢É„Åß„ÅØ: sudo apt install skim"
      zle reset-prompt
      return 1
    fi
    
    # Èùô„Åã„Å´ÂÆüË°åÔºà‰ΩôË®à„Å™„É°„ÉÉ„Çª„Éº„Ç∏„ÇíË°®Á§∫„Åó„Å™„ÅÑÔºâ
    local output
    output=$(pacifica 2>/dev/null)
    
    # Âá∫Âäõ„ÅåÁ©∫„Åß„Å™„ÅÑ„Åì„Å®„ÇíÁ¢∫Ë™ç
    if [[ -n "$output" ]]; then
      # sk„Å´Ê∏°„Åó„Å¶ÈÅ∏Êäû
      selected_dir=$(echo "$output" | sk --ansi --reverse --height '50%' --query "$LBUFFER" 2>/dev/null)
    else
      # Èùô„Åã„Å´„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ
      if command -v fd &>/dev/null; then
        selected_dir=$(fd --type d --hidden --exclude .git --exclude node_modules . "$HOME" 2>/dev/null | sk --ansi --reverse --height '50%' --query "$LBUFFER" 2>/dev/null)
      elif command -v find &>/dev/null; then
        selected_dir=$(find "$HOME" -type d -not -path "*/\.*" -not -path "*/node_modules/*" 2>/dev/null | sk --ansi --reverse --height '50%' --query "$LBUFFER" 2>/dev/null)
      fi
    fi
  else
    # pacifica„Åå„Ç§„É≥„Çπ„Éà„Éº„É´„Åï„Çå„Å¶„ÅÑ„Å™„ÅÑÂ†¥Âêà„ÅØfd„Åæ„Åü„ÅØfind„Çí‰ΩøÁî®ÔºàÈùô„Åã„Å´Ôºâ
    if command -v fd &>/dev/null; then
      selected_dir=$(fd --type d --hidden --exclude .git --exclude node_modules . "$HOME" 2>/dev/null | sk --ansi --reverse --height '50%' --query "$LBUFFER" 2>/dev/null)
    elif command -v find &>/dev/null; then
      selected_dir=$(find "$HOME" -type d -not -path "*/\.*" -not -path "*/node_modules/*" 2>/dev/null | sk --ansi --reverse --height '50%' --query "$LBUFFER" 2>/dev/null)
    else
      echo "„Ç®„É©„Éº: pacifica„ÄÅfd„ÄÅfind„ÅÆ„ÅÑ„Åö„Çå„ÇÇ„Ç§„É≥„Çπ„Éà„Éº„É´„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì"
      zle reset-prompt
      return 1
    fi
  fi

  # ÈÅ∏Êäû„Åó„Åü„Éá„Ç£„É¨„ÇØ„Éà„É™„ÅåÂ≠òÂú®„Åô„Çå„Å∞ÁßªÂãï
  if [ -n "$selected_dir" ]; then
    if [[ "$direct_mode" = "1" ]]; then
      # Áõ¥Êé•„É¢„Éº„Éâ: „Ç≥„Éû„É≥„Éâ„Å®„Åó„Å¶ÂÆüË°å
      cd "${selected_dir}"
      echo "‚úì ÁßªÂãïÂÖà: ${selected_dir}"
    else
      # ZLE„É¢„Éº„Éâ: „Ç¶„Ç£„Ç∏„Çß„ÉÉ„Éà„Å®„Åó„Å¶ÂÆüË°å
      BUFFER="cd ${selected_dir}"
      zle accept-line
    fi
  else
    if [[ "$direct_mode" != "1" && -o zle ]]; then
      zle reset-prompt
    else
      echo "„Éá„Ç£„É¨„ÇØ„Éà„É™„ÅåÈÅ∏Êäû„Åï„Çå„Åæ„Åõ„Çì„Åß„Åó„Åü"
    fi
  fi
}

function sk_change_directory() {
  # ZLE„ÅåÊúâÂäπ„Åã„Å©„ÅÜ„Åã„Çí„ÉÅ„Çß„ÉÉ„ÇØ
  if [[ ! -o zle ]]; then
    echo "„Ç®„É©„Éº: „É©„Ç§„É≥Á∑®ÈõÜ„ÅåÊúâÂäπ„Åß„ÅØ„ÅÇ„Çä„Åæ„Åõ„Çì„ÄÇ„Ç§„É≥„Çø„É©„ÇØ„ÉÜ„Ç£„Éñ„Ç∑„Çß„É´„ÅßÂÆüË°å„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ"
    return 1
  fi

  # SIGINTÔºàCtrl+CÔºâ„Éè„É≥„Éâ„É©„ÇíË®≠ÂÆö
  local original_sigint_handler=$(trap -p INT)
  
  # Èñ¢Êï∞ÁµÇ‰∫ÜÊôÇ„Å´SIGINT„Éè„É≥„Éâ„É©„ÇíÂÖÉ„Å´Êàª„ÅôÈñ¢Êï∞
  function cleanup() {
    if [[ -n "$original_sigint_handler" ]]; then
      eval "$original_sigint_handler"
    else
      trap - INT
    fi
  }
  
  # ÁµÇ‰∫ÜÊôÇ„Å´ÂøÖ„Åö„ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„Éó„ÇíÂÆüË°å
  trap cleanup EXIT
  
  # Ctrl+CÊäº‰∏ãÊôÇ„ÅÆÁã¨Ëá™Âá¶ÁêÜ
  trap "cleanup; return 130" INT

  # zoxide„Ç≥„Éû„É≥„Éâ„ÅåÂ≠òÂú®„Åô„Çã„Åã„ÉÅ„Çß„ÉÉ„ÇØ
  if ! command -v zoxide &>/dev/null; then
    echo "„Ç®„É©„Éº: zoxide„Åå„Ç§„É≥„Çπ„Éà„Éº„É´„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì„ÄÇ"
    echo "install-wsl-packages.sh„ÇíÂÆüË°å„Åô„Çã„Åã„ÄÅ‰ª•‰∏ã„ÅÆ„Ç≥„Éû„É≥„Éâ„Åß„Ç§„É≥„Çπ„Éà„Éº„É´„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºö"
    echo "sudo apt install zoxide"
    return 1
  fi

  local output=$(zoxide query -l)
  local selected_dir=""
  
  if [[ -n "$output" ]]; then
    selected_dir=$(echo "$output" | sk --ansi --reverse --height '50%' 2>/dev/null)
  fi
  
  if [ -n "$selected_dir" ]; then
    BUFFER="cd ${selected_dir}"
    zle accept-line
  fi
}

function sk_select_file_below_pwd() {
  # ZLE„ÅåÊúâÂäπ„Åã„Å©„ÅÜ„Åã„Çí„ÉÅ„Çß„ÉÉ„ÇØ
  if [[ ! -o zle ]]; then
    echo "„Ç®„É©„Éº: „É©„Ç§„É≥Á∑®ÈõÜ„ÅåÊúâÂäπ„Åß„ÅØ„ÅÇ„Çä„Åæ„Åõ„Çì„ÄÇ„Ç§„É≥„Çø„É©„ÇØ„ÉÜ„Ç£„Éñ„Ç∑„Çß„É´„ÅßÂÆüË°å„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ"
    return 1
  fi

  # SIGINTÔºàCtrl+CÔºâ„Éè„É≥„Éâ„É©„ÇíË®≠ÂÆö
  local original_sigint_handler=$(trap -p INT)
  
  # Èñ¢Êï∞ÁµÇ‰∫ÜÊôÇ„Å´SIGINT„Éè„É≥„Éâ„É©„ÇíÂÖÉ„Å´Êàª„ÅôÈñ¢Êï∞
  function cleanup() {
    if [[ -n "$original_sigint_handler" ]]; then
      eval "$original_sigint_handler"
    else
      trap - INT
    fi
  }
  
  # ÁµÇ‰∫ÜÊôÇ„Å´ÂøÖ„Åö„ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„Éó„ÇíÂÆüË°å
  trap cleanup EXIT
  
  # Ctrl+CÊäº‰∏ãÊôÇ„ÅÆÁã¨Ëá™Âá¶ÁêÜ
  trap "cleanup; return 130" INT

  if [ ! `pwd | grep "$(ghq root)"` ]; then
    echo "you are not in ghq path"
    zle accept-line
    return 0
  fi
  
  local selected_path=""
  
  # fd„Ç≥„Éû„É≥„Éâ„ÅÆÂá∫Âäõ„ÇíÂ§âÊï∞„Å´‰øùÂ≠ò„Åó„Å¶„Åã„Çâsk„Å´Ê∏°„Åô
  local files_list=$(fd --type f --hidden --exclude .git --exclude node_modules --exclude vendor 2>/dev/null)
  
  if [[ -n "$files_list" ]]; then
    selected_path=$(echo "$files_list" | sk --ansi --reverse --height '50%' --preview 'bat --style=numbers --color=always {}' 2>/dev/null)
  fi
  
  if [ -n "$selected_path" ]; then
    go_to "$selected_path"
  fi
}

function sk_select_file_within_project() {
  # ZLE„ÅåÊúâÂäπ„Åã„Å©„ÅÜ„Åã„Çí„ÉÅ„Çß„ÉÉ„ÇØ
  if [[ ! -o zle ]]; then
    echo "„Ç®„É©„Éº: „É©„Ç§„É≥Á∑®ÈõÜ„ÅåÊúâÂäπ„Åß„ÅØ„ÅÇ„Çä„Åæ„Åõ„Çì„ÄÇ„Ç§„É≥„Çø„É©„ÇØ„ÉÜ„Ç£„Éñ„Ç∑„Çß„É´„ÅßÂÆüË°å„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ"
    return 1
  fi

  # SIGINTÔºàCtrl+CÔºâ„Éè„É≥„Éâ„É©„ÇíË®≠ÂÆö
  local original_sigint_handler=$(trap -p INT)
  
  # Èñ¢Êï∞ÁµÇ‰∫ÜÊôÇ„Å´SIGINT„Éè„É≥„Éâ„É©„ÇíÂÖÉ„Å´Êàª„ÅôÈñ¢Êï∞
  function cleanup() {
    if [[ -n "$original_sigint_handler" ]]; then
      eval "$original_sigint_handler"
    else
      trap - INT
    fi
  }
  
  # ÁµÇ‰∫ÜÊôÇ„Å´ÂøÖ„Åö„ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„Éó„ÇíÂÆüË°å
  trap cleanup EXIT
  
  # Ctrl+CÊäº‰∏ãÊôÇ„ÅÆÁã¨Ëá™Âá¶ÁêÜ
  trap "cleanup; return 130" INT

  local base_path=$(pwd | grep -o "$(ghq root)/[^/]*/[^/]*/[^/]*")
  if [ -z "$base_path" ]; then
    echo "you are not in ghq project"
    zle accept-line
    return 0
  fi
  
  # fd„Ç≥„Éû„É≥„Éâ„ÅÆÂá∫Âäõ„ÇíÂ§âÊï∞„Å´‰øùÂ≠ò
  local paths=$(fd --type f --hidden --exclude .git --exclude node_modules --exclude vendor . "$base_path" 2>/dev/null)
  
  # fd„Ç≥„Éû„É≥„Éâ„ÅÆÂá∫Âäõ„ÅåÁ©∫„Åß„Å™„ÅÑÂ†¥Âêà„ÅÆ„Åøsk„Å´Ê∏°„Åô
  if [[ -n "$paths" ]]; then
    local selected_path="$(echo "(root)"$'\n'"$paths" | sk --ansi --reverse --height '50%' --preview 'bat --style=numbers --color=always {} 2>/dev/null || echo "Preview not available"' 2>/dev/null)"
    
    if [ -n "$selected_path" ]; then
      if [[ "$selected_path" = "(root)" ]]; then
        go_to "$base_path"
        return 0
      fi
      go_to "$selected_path"
    fi
  else
    echo "„Éó„É≠„Ç∏„Çß„ÇØ„ÉàÂÜÖ„Å´„Éï„Ç°„Ç§„É´„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì"
    zle reset-prompt
  fi
}

function go_to() {
  if [ -f "$1" ]; then
    nvim "$1"
    dir_path=$(dirname "$1")
    BUFFER="cd \"$dir_path\""
  elif [ -d "$1" ]; then
    BUFFER="cd \"$1\""
  else
    echo "selected path is neither file nor directory"
  fi
  zle accept-line
}

function sk_edit_file() {
  local selected_path=$(fd --type f --hidden --exclude .git | sk --ansi --reverse --height '50%' --preview 'bat --style=numbers --color=always {}')
  if [ -n "$selected_path" ]; then
    nvim "$selected_path"
  fi
}

# Git branch selection
function sk_select_branch_except_current() {
  git branch -a --sort=-authordate | \
    grep -v -e '->' -e '*' | \
    sed "s/remotes\/origin\///g" | \
    awk '!a[$0]++' | \
    sk --ansi --reverse --height '50%'
}

function sk_select_local_branch_except_current() {
  git branch | \
    grep -v -e '->' -e '*' | \
    sed "s/remotes\/origin\///g" | \
    awk '!a[$0]++' | \
    sk --ansi --reverse --height '50%'
}

function sk_select_branch_all() {
  git branch -a --sort=-authordate | \
    grep -v -e '->' | \
    sed "s/remotes\/origin\///g" | \
    sed "s/\*/ /g" | \
    awk '!a[$0]++' | \
    sk --ansi --reverse --height '50%'
}

# Tmux
function precmd() {
  if [ ! -z $TMUX ]; then
    tmux refresh-client -S
  fi
}

# Font installation
function nerd_fonts() {
  git clone --branch=master --depth 1 https://github.com/ryanoasis/nerd-fonts.git
  cd nerd-fonts
  ./install.sh $1
  cd ..
  rm -rf nerd-fonts
}

# Cross-platform open command (works in macOS, Linux, and WSL)
function open() {
  # Check if arguments were provided
  if [[ $# -eq 0 ]]; then
    echo "‚ùå Error: Missing argument"
    echo "Usage: open <file or URL>"
    return 1
  fi

  # macOS - use native open command
  if [[ "$OSTYPE" == "Darwin"* ]]; then
    command open "$@"
    return $?
  fi

  local target="$1"
  
  # Detect platform and use appropriate command
  if grep -q Microsoft /proc/version 2>/dev/null; then
    # WSL - handle with special care
    
    # Check for directory specifically
    if [[ -d "$target" ]]; then
      # Directory handling in WSL
      if command -v wslview >/dev/null 2>&1; then
        # Use wslview for directories (best option)
        wslview "$target"
      elif command -v wslpath >/dev/null 2>&1; then
        # Convert path to Windows and use explorer directly
        local winpath=$(wslpath -w "$target")
        explorer.exe "$winpath"
      else
        # Last resort - just try explorer with path
        explorer.exe "$target"
        echo "‚ö†Ô∏è Warning: For better directory handling, install wslu:"
        echo "    sudo apt install -y wslu"
      fi
    else
      # Files and URLs handling
      if command -v wslview >/dev/null 2>&1; then
        wslview "$target"
      else
        # Convert path to Windows format if it's a file path
        if [[ -e "$target" ]]; then
          local winpath=$(wslpath -w "$target")
          explorer.exe "$winpath"
        else
          # If it's a URL or doesn't exist as a file, pass directly
          explorer.exe "$target"
        fi
        echo "üí° Tip: Install wslu package for better Windows integration:"
        echo "    sudo apt install -y wslu"
      fi
    fi
    
    # Check for locale issues and provide helpful message
    if grep -q "warning: Setting locale failed" <<< "$(locale 2>&1)"; then
      echo ""
      echo "‚ö†Ô∏è Locale Warning: You have locale issues in your environment."
      echo "üìù Run the utility setup script to resolve these warnings:"
      echo "    sh ~/go/github.com/esh2n/dotfiles/linux-utils-setup.sh"
    fi
  else
    # Regular Linux - use xdg-open
    if command -v xdg-open >/dev/null 2>&1; then
      xdg-open "$target"
      
      # Check for specific directory error
      if [[ $? -ne 0 && -d "$target" ]]; then
        echo "‚ö†Ô∏è Warning: xdg-open failed to open directory."
        echo "üí° Install desktop-file-utils and required applications:"
        echo "    sudo apt install -y desktop-file-utils xdg-utils"
        echo "    sudo update-desktop-database"
        
        # Try to fall back to a file manager if available
        for fm in nautilus thunar dolphin pcmanfm caja nemo; do
          if command -v $fm >/dev/null 2>&1; then
            echo "üîÑ Trying to open with $fm instead..."
            $fm "$target"
            return $?
          fi
        done
      fi
    else
      echo "‚ùå Error: No suitable 'open' command found"
      echo "üí° Install xdg-utils package:"
      echo "    sudo apt install -y xdg-utils"
      return 1
    fi
  fi
}

# GCloud functions
function gcloud-activate() {
  name="$1"
  project="$2"
  echo "gcloud config configurations activate \"${name}\""
  gcloud config configurations activate "${name}"
}

function gx-complete() {
  _values $(gcloud config configurations list | awk '{print $1}')
}

function gx() {
  name="$1"
  if [ -z "$name" ]; then
    line=$(gcloud config configurations list | sk --ansi --reverse --height '50%')
    name=$(echo "${line}" | awk '{print $1}')
  else
    line=$(gcloud config configurations list | grep "$name")
  fi
  project=$(echo "${line}" | awk '{print $4}')
  gcloud-activate "${name}" "${project}"
}
compdef gx-complete gx

# Bind keys for fuzzy finder (Áí∞Â¢ÉÈÅ©ÂøúÂûã)
if [[ $- == *i* ]]; then
  # „Ç§„É≥„Çø„É©„ÇØ„ÉÜ„Ç£„Éñ„Ç∑„Çß„É´„ÅÆÂ†¥Âêà„ÅÆ„Åø„Ç≠„Éº„Éê„Ç§„É≥„Éâ„ÇíË®≠ÂÆö
  # „Ç§„É≥„Çø„É©„ÇØ„ÉÜ„Ç£„Éñ„Ç∑„Çß„É´„Åß„ÇÇZLE„ÅåÁÑ°Âäπ„Å™Â†¥Âêà„ÅÆ„Åü„ÇÅ„Å´„ÄÅ„Ç≥„Éû„É≥„Éâ„Ç®„Ç§„É™„Ç¢„Çπ„ÇÇË®≠ÂÆö
  
  # ZLE„ÅåÊúâÂäπ„Å™Â†¥Âêà„ÅÆ„Åø„ÄÅ„Ç¶„Ç£„Ç∏„Çß„ÉÉ„ÉàÁôªÈå≤„Å®„Ç≠„Éº„Éê„Ç§„É≥„ÉâË®≠ÂÆö„ÇíË°å„ÅÜ
  if [[ -o zle ]]; then
    # ÂÖ®„Å¶„ÅÆskÈñ¢ÈÄ£„ÅÆÈñ¢Êï∞„Çí„Ç¶„Ç£„Ç∏„Çß„ÉÉ„Éà„Å®„Åó„Å¶ÁôªÈå≤
    zle -N sk_select_history 2>/dev/null
    zle -N sk_select_src 2>/dev/null
    zle -N sk_change_directory 2>/dev/null
    zle -N sk_select_file_within_project 2>/dev/null
    zle -N sk_select_file_below_pwd 2>/dev/null
    
    # WSLÁí∞Â¢É„Åß„ÅÆ„Ç≠„Éº„Éê„Ç§„É≥„ÉâË®≠ÂÆö
    if [ "$IS_WSL" = "1" ]; then
      echo "WSLÁí∞Â¢ÉÁî®„Ç≠„Éº„Éê„Ç§„É≥„Éâ„ÇíË®≠ÂÆö„Åó„Å¶„ÅÑ„Åæ„Åô..."
      
      # ÈÅÖÂª∂„Ç≠„Éº„Éê„Ç§„É≥„ÉâË®≠ÂÆöÁî®„ÅÆÈñ¢Êï∞„ÇíÂÆöÁæ©
      function __setup_wsl_keybinds() {
        # Âü∫Êú¨„ÅÆ„Ç≠„Éº„Éê„Ç§„É≥„Éâ
        bindkey '^r' sk_select_history   # Ctrl+R: Â±•Ê≠¥Ê§úÁ¥¢
        bindkey '^g' sk_change_directory # Ctrl+G: „Éá„Ç£„É¨„ÇØ„Éà„É™Â§âÊõ¥
        
        # ‰ª£Êõø„Ç≠„Éº„Éê„Ç§„É≥„ÉâÔºàCtrl+]„ÅØnormal„É¢„Éº„Éâ„ÅÆÂàáÊõø„Å´‰ΩøÁî®„Åï„Çå„Çã„Åü„ÇÅÔºâ
        bindkey '^\' sk_select_src       # Ctrl+\
        bindkey '^p' sk_select_src       # Ctrl+P
        bindkey '\e]' sk_select_src      # Alt+]
        
        # vim„É¢„Éº„Éâ„ÅÆÂêÑ„É¢„Éº„Éâ„Å´„ÇÇ„Ç≠„Éº„Éê„Ç§„É≥„Éâ„ÇíË®≠ÂÆö
        bindkey -M viins '^]' sk_select_src 2>/dev/null || true  # insert„É¢„Éº„Éâ
        bindkey -M vicmd '^]' sk_select_src 2>/dev/null || true  # normal„É¢„Éº„ÉâÔºà„Ç≥„Éû„É≥„Éâ„É¢„Éº„ÉâÔºâ
        
        # normal„É¢„Éº„Éâ„Åß„ÇÇ‰ª£Êõø„Ç≠„Éº„Çí‰Ωø„Åà„Çã„Çà„ÅÜ„Å´„Åô„Çã
        bindkey -M vicmd '^\' sk_select_src 2>/dev/null || true  # Ctrl+\
        bindkey -M vicmd '^p' sk_select_src 2>/dev/null || true  # Ctrl+P
        bindkey -M vicmd '\e]' sk_select_src 2>/dev/null || true # Alt+]
      }
      
      # ÂÆâÂÖ®„Å´ÂàùÊúüË®≠ÂÆö„ÇíÂÆüË°å
      __setup_wsl_keybinds
      
      # ËøΩÂä†„ÅÆ„Ç≠„Éº„Éê„Ç§„É≥„Éâ
      bindkey '^v' sk_select_file_within_project  # Ctrl+V
      bindkey '^b' sk_select_file_below_pwd       # Ctrl+B
      
      # WSLÁí∞Â¢É„Åß„ÅÆ„Ç≠„Éº„Éê„Ç§„É≥„Éâ‰∏ÄË¶ß„ÇíË°®Á§∫
    else
      # macOS / ÈÄöÂ∏∏LinuxÁí∞Â¢ÉÁî®„ÅÆ„Ç≠„Éº„Éê„Ç§„É≥„ÉâË®≠ÂÆöÈñ¢Êï∞
      function __setup_macos_keybinds() {
        bindkey '^r' sk_select_history
        bindkey '^]' sk_select_src
        bindkey '^g' sk_change_directory
        bindkey '^v' sk_select_file_within_project
        bindkey '^b' sk_select_file_below_pwd
        
        # vim„É¢„Éº„Éâ„Åß„ÇÇ„Ç≠„Éº„Éê„Ç§„É≥„Éâ„ÇíË®≠ÂÆö
        bindkey -M viins '^]' sk_select_src 2>/dev/null || true
        bindkey -M vicmd '^]' sk_select_src 2>/dev/null || true
      }
      
      # ÂÆâÂÖ®„Å´ÂàùÊúüË®≠ÂÆö„ÇíÂÆüË°å
      __setup_macos_keybinds
      
    fi
    
    # Á´ØÊú´Ëµ∑ÂãïÊôÇ„Å´ÂÆüË°å„Åô„ÇãÈñ¢Êï∞„ÇíËøΩÂä†ÔºàÈÅÖÂª∂ÂàùÊúüÂåñÔºâ
    function precmd_setup_keybinds() {
      # „Åì„ÅÆÈñ¢Êï∞„ÅØ„Éó„É≠„É≥„Éó„ÉàË°®Á§∫Ââç„Å´ÊØéÂõûÂÆüË°å„Åï„Çå„Çã
      # ÂøÖË¶Å„Å´Âøú„Åò„Å¶„Ç≠„Éº„Éê„Ç§„É≥„Éâ„ÇíÂÜçË®≠ÂÆöÂèØËÉΩ
      
      # ZLE„Åå„Ç¢„ÇØ„ÉÜ„Ç£„Éñ„Åß„ÅÇ„Çå„Å∞„ÄÅVim„É¢„Éº„Éâ„Åß„ÅÆ„Ç≠„Éº„Éê„Ç§„É≥„Éâ„ÇíË©¶Ë°å
      if [[ -o zle ]]; then
        if [ "$IS_WSL" = "1" ]; then
          bindkey -M viins '^]' sk_select_src 2>/dev/null || true
        else
          bindkey -M viins '^]' sk_select_src 2>/dev/null || true
          bindkey -M vicmd '^]' sk_select_src 2>/dev/null || true
        fi
      fi
      
      # ‰∏ÄÂ∫¶ÂÆüË°å„Åó„Åü„Çâ„ÄÅ„Åì„ÅÆÈñ¢Êï∞„Çíprecmd„Éï„ÉÉ„ÇØ„Åã„ÇâÂâäÈô§
      add-zsh-hook -d precmd precmd_setup_keybinds
    }
    
    # „Éó„É≠„É≥„Éó„ÉàË°®Á§∫Ââç„Å´ÂÆüË°å„Åô„Çã„Éï„ÉÉ„ÇØ„ÇíËøΩÂä†
    autoload -Uz add-zsh-hook
    add-zsh-hook precmd precmd_setup_keybinds
  else
    # ZLE„ÅåÁÑ°Âäπ„Å™Â†¥Âêà„ÅØË≠¶Âëä
    [[ -z "$WSL_KEYBINDS_WARNING" ]] && {
      echo "Ë≠¶Âëä: ZLE„ÅåÈùû„Ç¢„ÇØ„ÉÜ„Ç£„Éñ„Å™„Åü„ÇÅ„ÄÅ„Ç≠„Éº„Éê„Ç§„É≥„ÉâË®≠ÂÆö„ÅÆ‰ª£„Çè„Çä„Å´„Ç≥„Éû„É≥„Éâ„Ç®„Ç§„É™„Ç¢„Çπ„Çí‰ΩøÁî®„Åó„Åæ„Åô:"
      echo "- src: „Éó„É≠„Ç∏„Çß„ÇØ„Éà„Éá„Ç£„É¨„ÇØ„Éà„É™ÈÅ∏Êäû"
      echo "- pd: „Ç´„É¨„É≥„Éà„Éá„Ç£„É¨„ÇØ„Éà„É™‰ª•‰∏ã„ÅÆ„Éï„Ç°„Ç§„É´ÈÅ∏Êäû"
      export WSL_KEYBINDS_WARNING=1
    }
  fi
  
  # ZLE„ÅÆÁä∂ÊÖã„Å´Èñ¢„Çè„Çâ„Åö„ÄÅ„Ç≥„Éû„É≥„Éâ„Å®„Åó„Å¶ÂÆüË°å„Åß„Åç„Çã„Çà„ÅÜ„Å´„Ç®„Ç§„É™„Ç¢„Çπ„ÇíË®≠ÂÆö
  alias src="sk_select_src --direct"
  alias pd="sk_select_file_below_pwd --direct"
  alias project="sk_select_src --direct"
  alias dirfind="sk_change_directory --direct"
else
  # Èùû„Ç§„É≥„Çø„É©„ÇØ„ÉÜ„Ç£„Éñ„Ç∑„Çß„É´„ÅÆÂ†¥Âêà„ÅØË≠¶Âëä
  [[ -z "$WSL_KEYBINDS_WARNING" ]] && {
    echo "Ë≠¶Âëä: Èùû„Ç§„É≥„Çø„É©„ÇØ„ÉÜ„Ç£„Éñ„Ç∑„Çß„É´„ÅÆ„Åü„ÇÅ„ÄÅ„Ç≠„Éº„Éê„Ç§„É≥„Éâ„Åå‰ΩøÁî®„Åß„Åç„Åæ„Åõ„Çì„ÄÇ"
    export WSL_KEYBINDS_WARNING=1
  }
fi

# „Ç≠„Éº„Éê„Ç§„É≥„Éâ„Çí„ÉÜ„Çπ„Éà„Åô„Çã„Éò„É´„Éë„ÉºÈñ¢Êï∞
function test_keybindings() {
  echo "„Ç≠„Éº„Éê„Ç§„É≥„Éâ„ÉÜ„Çπ„Éà„É¢„Éº„Éâ„ÇíÈñãÂßã„Åó„Åæ„Åô„ÄÇ„Ç≠„Éº„ÇíÊäº„Åó„Å¶Á¢∫Ë™ç„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ"
  echo "ÁµÇ‰∫Ü„Åô„Çã„Å´„ÅØ Ctrl+D „Çí2ÂõûÊäº„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ"
  cat <<EOF
„ÉÜ„Çπ„Éà„Åô„Çã‰∏ª„Å™„Ç≠„Éº„Éê„Ç§„É≥„Éâ:
- Ctrl+]
- Ctrl+\
- Ctrl+P
- Alt+]
EOF

  cat -v
}

# Enhanced search functions
function search_in_files() {
  local query="$1"
  if [ -z "$query" ]; then
    echo "Usage: search_in_files <query>"
    return 1
  fi
  rg --color=always --line-number --no-heading --smart-case "$query" | \
    sk --ansi --reverse --height '50%' --preview 'echo {}' \
    --preview-window 'up,60%,border-bottom,+{2}+3/3,~3'
}

function preview_file() {
  local file="$1"
  if [ -z "$file" ]; then
    echo "Usage: preview_file <file>"
    return 1
  fi
  bat --style=numbers --color=always "$file"
}

function search_and_edit() {
  local result=$(search_in_files "$1")
  if [ -n "$result" ]; then
    local file=$(echo "$result" | cut -d':' -f1)
    local line=$(echo "$result" | cut -d':' -f2)
    nvim "+$line" "$file"
  fi
}

# Zen Mode - Toggle sketchybar and borders
ZEN_MODE_ACTIVE=0

function toggle_zen_mode() {
  if [ $ZEN_MODE_ACTIVE -eq 0 ]; then
    # Turn on Zen mode (disable sketchybar and borders)
    brew services stop sketchybar
    brew services stop borders
    ZEN_MODE_ACTIVE=1
    echo "üßò Zen Mode: ON - sketchybar and borders disabled"
  else
    # Turn off Zen mode (enable sketchybar and borders)
    brew services start sketchybar
    brew services start borders
    ZEN_MODE_ACTIVE=0
    echo "üñ•Ô∏è Zen Mode: OFF - sketchybar and borders enabled"
  fi
}

# Create alias for Zen mode
alias zen='toggle_zen_mode'

# Ë®≠ÂÆö„Éï„Ç°„Ç§„É´„ÅÆÂÜçË™≠„ÅøËæº„ÅøÈñ¢Êï∞ÔºàË©≥Á¥∞„Éë„Éï„Ç©„Éº„Éû„É≥„ÇπÂàÜÊûê‰ªò„ÅçÔºâ
function sz() {
  # ÁîªÈù¢„Çí„ÇØ„É™„Ç¢„Åó„Å¶Êñ∞„Åó„ÅèÈñãÂßã
  clear
  
  # LOAD ZSH ASCII Art„ÇíË°®Á§∫ÔºàÊ≠£Á¢∫„Å´‰øÆÊ≠£Ôºâ
  echo ""
  echo -e "\033[38;5;196m‚ñà‚ñà‚ïó      \033[38;5;214m ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  \033[38;5;226m ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  \033[38;5;46m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  \033[38;5;51m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó\033[38;5;129m‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïó\033[0m"
  echo -e "\033[38;5;196m‚ñà‚ñà‚ïë      \033[38;5;214m‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ñà‚ñà‚ïó \033[38;5;226m‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó \033[38;5;46m‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë \033[38;5;51m‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù\033[38;5;129m‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë\033[0m"
  echo -e "\033[38;5;196m‚ñà‚ñà‚ïë      \033[38;5;214m‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë \033[38;5;226m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë \033[38;5;46m‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë \033[38;5;51m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó\033[38;5;129m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë\033[0m"
  echo -e "\033[38;5;196m‚ñà‚ñà‚ïë      \033[38;5;214m‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë \033[38;5;226m‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë \033[38;5;46m‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë \033[38;5;51m‚ïö‚ïê‚ïê‚ïê‚ïê‚ñà‚ñà‚ïë\033[38;5;129m‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë\033[0m"
  echo -e "\033[38;5;196m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó \033[38;5;214m‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù \033[38;5;226m‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë \033[38;5;46m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù \033[38;5;51m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë\033[38;5;129m‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë\033[0m"
  echo -e "\033[38;5;196m‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù \033[38;5;214m ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù  \033[38;5;226m‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù \033[38;5;46m‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù  \033[38;5;51m‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\033[38;5;129m‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù\033[0m"
  echo ""
  
  # ÁèæÂú®„ÅÆPATH„Çí‰øùÂ≠ò
  local OLD_PATH="$PATH"
  
  # OSÊ§úÂá∫ÔºàdateÁî®Ôºâ
  local IS_MACOS=0
  if [[ "$(uname)" == "Darwin" ]]; then
    IS_MACOS=1
  fi
  
  # ÊôÇÈñì„ÇíÂèñÂæó„Åô„ÇãÈñ¢Êï∞ÔºàOSÈñì„ÅÆ‰∫íÊèõÊÄß„ÇíÁ¢∫‰øùÔºâ
  function get_timestamp() {
    if [[ $IS_MACOS -eq 1 ]]; then
      # macOS„Åß„ÅØdate„Ç≥„Éû„É≥„Éâ„Çí‰ΩøÁî®Ôºàgdate„ÅØ‰∏çË¶ÅÔºâ
      date +%s.%N
    else
      # Linux/WSL„Åß„ÅØdate„Ç≥„Éû„É≥„Éâ„Åå%N„Çí„Çµ„Éù„Éº„Éà
      date +%s.%N
    fi
  }
  
  # „Éï„Ç°„Ç§„É´„ÅÆ„Éà„É¨„Éº„Çπ„Å®„Éë„Éï„Ç©„Éº„Éû„É≥„ÇπË®àÊ∏¨„Çí„Çª„ÉÉ„Éà„Ç¢„ÉÉ„Éó
  local debug=${SZ_DEBUG:-0}
  local start_time end_time duration
  local spinner=('‚†ã' '‚†ô' '‚†π' '‚†∏' '‚†º' '‚†¥' '‚†¶' '‚†ß' '‚†á' '‚†è')
  local spin_idx=0
  # ‰∏ÄÊôÇ„Éï„Ç°„Ç§„É´„Çí„ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„ÉóÔºàÂâçÂõû„ÅÆÂÆüË°å„ÅßÊÆã„Å£„Å¶„ÅÑ„ÇãÂèØËÉΩÊÄß„Åå„ÅÇ„Çã„Åü„ÇÅÔºâ
  # zsh„ÅÆglob„Éë„Çø„Éº„É≥„Åß„Éï„Ç°„Ç§„É´„ÅåË¶ã„Å§„Åã„Çâ„Å™„ÅÑÂ†¥Âêà„ÅÆ„Ç®„É©„Éº„ÇíÊäëÂà∂
  setopt local_options no_nomatch
  /bin/rm -f /tmp/sz_loading_* /tmp/sz_times_* 2>/dev/null
  
  # „Éë„Éï„Ç©„Éº„Éû„É≥„ÇπË®àÊ∏¨Áî®„ÅÆ‰∏ÄÊôÇ„Éá„Ç£„É¨„ÇØ„Éà„É™„Çí‰ΩúÊàê
  mkdir -p /tmp/sz_times
  
  # „É≠„Éº„Éâ„Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥Èñ¢Êï∞
  function spin() {
    local step=$1
    local spinner_file="/tmp/sz_loading_${step}"
    while [ -e "$spinner_file" ]; do
      printf "\r\033[K [%s] %s Loading..." "$step" "${spinner[$spin_idx]}"
      spin_idx=$(( (spin_idx + 1) % 10 ))
      sleep 0.1
    done
    printf "\r\033[K"
  }
  
  # „ÇΩ„Éº„Çπ„Éï„Ç°„Ç§„É´Èñ¢Êï∞„ÅÆ„Ç™„Éº„Éê„Éº„É©„Ç§„ÉâÔºàbc„Å™„Å©„ÅÆÂ§ñÈÉ®„Ç≥„Éû„É≥„Éâ„Å´‰æùÂ≠ò„Åó„Å™„ÅÑÔºâ
  function time_source() {
    local file=$1
    local file_name="${file##*/}"  # basename „ÅÆ‰ª£„Çè„Çä„Å´ zsh „ÅÆ„Éë„É©„É°„Éº„ÇøÂ±ïÈñã„Çí‰ΩøÁî®
    local start=$(get_timestamp)
    
    # „Éï„Ç°„Ç§„É´Âêç„ÅåÁ©∫„Åß„Å™„ÅÑ„ÅãÁ¢∫Ë™ç
    if [[ -z "$file" || "$file" == "-" ]]; then
      builtin source "$file" 2>/dev/null
      return
    fi
    
    # ÂÖÉ„ÅÆsourceÈñ¢Êï∞„Çí‰ΩøÁî®„Åó„Å¶„Éï„Ç°„Ç§„É´„ÇíË™≠„ÅøËæº„Åø
    builtin source "$file" 2>/dev/null
    
    local end=$(get_timestamp)
    
    # bc „Çí‰Ωø„Çè„Åö„Å´Ë®àÁÆóÔºàzsh „ÅÆÁÆóË°ìÂ±ïÈñã„Çí‰ΩøÁî®Ôºâ
    # end/start„ÅåÊï∞ÂÄ§„Åß„Å™„Åë„Çå„Å∞Ë®àÁÆó„Åó„Å™„ÅÑ
    if [[ "$end" =~ ^[0-9]+(\.[0-9]+)?$ && "$start" =~ ^[0-9]+(\.[0-9]+)?$ ]]; then
      local time_diff=$(( end - start ))
      
      # ÊôÇÈñì„ÇíË®òÈå≤Ôºà„Éï„Ç°„Ç§„É´Âêç„ÅåÂ¶•ÂΩì„Å™Â†¥Âêà„ÅÆ„ÅøÔºâ
      if [[ -n "$file" && "$file" != "-" && "$file" != ":" ]]; then
        printf "%s:%.6f\n" "$file" $time_diff >> /tmp/sz_times/all_files.txt
      fi
    fi
  }
  
  # ÂÖÉ„ÅÆsourceÈñ¢Êï∞„Çí‰øùÂ≠ò
  local original_source=$(which source)
  
  # „Éá„Éê„ÉÉ„Ç∞„É¢„Éº„Éâ„ÅÆÂ†¥Âêà„ÅÆ„Åø„Ç™„Éº„Éê„Éº„É©„Ç§„Éâ
  if [ "$debug" = "1" ]; then
    functions[source]="time_source"
  fi
  
  # DOTENV_ALWAYS_LOAD„ÇíË®≠ÂÆöÔºà.env„Éï„Ç°„Ç§„É´„ÅÆËá™ÂãïË™≠„ÅøËæº„ÅøÔºâ
  export DOTENV_ALWAYS_LOAD=1
  
  # === zshenv „ÅÆ„É≠„Éº„Éâ ===
  touch /tmp/sz_loading_zshenv
  spin "zshenv" &
  local SPIN_PID=$!
  
  start_time=$(get_timestamp)
  if [ -f ~/.zshenv ]; then
    if [ "$debug" = "1" ]; then
      time_source ~/.zshenv
    else
      source ~/.zshenv 2>/dev/null
    fi
  fi
  end_time=$(get_timestamp)
  
  # ÊôÇÈñìË®àÁÆóÔºàÊï∞ÂÄ§„ÉÅ„Çß„ÉÉ„ÇØÔºâ
  local zshenv_time=0
  if [[ "$end_time" =~ ^[0-9]+(\.[0-9]+)?$ && "$start_time" =~ ^[0-9]+(\.[0-9]+)?$ ]]; then
    zshenv_time=$(( end_time - start_time ))
  fi
  
  /bin/rm -f /tmp/sz_loading_zshenv
  wait $SPIN_PID 2>/dev/null
  
  # === zshrc „ÅÆ„É≠„Éº„Éâ ===
  # Ë®≠ÂÆö„Éï„Ç°„Ç§„É´„Éë„Çπ„ÅÆ‰øùÂ≠ò
  local config_files=(
    "$ZDOTDIR/options.zsh"
    "$ZDOTDIR/plugins.zsh"
    "$ZDOTDIR/prompt.zsh"
    "$ZDOTDIR/trash.zsh"
    "$ZDOTDIR/functions.zsh"
    "$ZDOTDIR/aliases.zsh"
    "$ZDOTDIR/brew.zsh"
  )
  
  # OSÂõ∫Êúâ„ÅÆË®≠ÂÆö„Éï„Ç°„Ç§„É´„ÇíËøΩÂä†
  if [[ $IS_MACOS -eq 1 ]]; then
    config_files+=("$ZDOTDIR/sketchybar.zsh")
  fi
  
  touch /tmp/sz_loading_zshrc
  spin "zshrc" &
  SPIN_PID=$!
  
  start_time=$(get_timestamp)
  if [ -f ~/.zshrc ]; then
    if [ "$debug" = "1" ]; then
      time_source ~/.zshrc
    else
      source ~/.zshrc 2>/dev/null
    fi
  fi
  end_time=$(get_timestamp)
  
  # ÊôÇÈñìË®àÁÆóÔºàÊï∞ÂÄ§„ÉÅ„Çß„ÉÉ„ÇØÔºâ
  local zshrc_time=0
  if [[ "$end_time" =~ ^[0-9]+(\.[0-9]+)?$ && "$start_time" =~ ^[0-9]+(\.[0-9]+)?$ ]]; then
    zshrc_time=$(( end_time - start_time ))
  fi
  
  /bin/rm -f /tmp/sz_loading_zshrc
  wait $SPIN_PID 2>/dev/null
  
  # sourceÈñ¢Êï∞„ÇíÂÖÉ„Å´Êàª„Åô
  if [ "$debug" = "1" ]; then
    functions[source]="$original_source"
  fi
  
  # DOTENV_ALWAYS_LOAD„Çí„É™„Çª„ÉÉ„Éà
  unset DOTENV_ALWAYS_LOAD
  
  # PATH„ÅåÂ£ä„Çå„ÅüÂ†¥Âêà„ÄÅÂÖÉ„Å´Êàª„ÅôÂÆâÂÖ®Ë£ÖÁΩÆ
  if ! command -v ls &>/dev/null; then
    export PATH="$OLD_PATH"
    echo "‚ö†Ô∏è PATH„ÅåÁ†¥Êêç„Åó„Åü„Åü„ÇÅ„ÄÅÂÖÉ„ÅÆÁä∂ÊÖã„Å´Âæ©ÂÖÉ„Åó„Åæ„Åó„Åü"
  fi
  
  # „Çπ„Çø„Ç§„É™„ÉÉ„Ç∑„É•„Å™ÂÆå‰∫Ü„É°„ÉÉ„Çª„Éº„Ç∏
  echo -e "\033[38;5;39m‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
  echo -e "‚ïë\033[38;5;255m        CONFIGURATION RELOADED       \033[38;5;39m‚ïë"
  echo -e "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\033[0m"
  
  # „Éá„Éê„ÉÉ„Ç∞ÊÉÖÂ†±Ë°®Á§∫Ôºà„Ç™„Éó„Ç∑„Éß„É≥Ôºâ
  if [ "$debug" = "1" ]; then
    # Â§ñÈÉ®„Ç≥„Éû„É≥„Éâ„Å∏„ÅÆ‰æùÂ≠ò„ÇíÊ∏õ„Çâ„Åó„Åü„Ç∑„É≥„Éó„É´„Å™Ë°®Á§∫
    echo -e "\n\033[38;5;214m== „Éë„Éï„Ç©„Éº„Éû„É≥„ÇπÊÉÖÂ†± ==\033[0m"
    
    # Â∞èÊï∞ÁÇπ‰ª•‰∏ã6Ê°Å„Å´Âà∂ÈôêÔºàzsh„ÅÆÁµÑ„ÅøËæº„ÅøÊ©üËÉΩ„ÅÆ„Åø„Çí‰ΩøÁî®Ôºâ
    printf "zshenv: \033[38;5;82m%.6fÁßí\033[0m\n" $zshenv_time
    printf "zshrc: \033[38;5;82m%.6fÁßí\033[0m\n" $zshrc_time
    
    # Á∞°ÊòìË®àÁÆóÔºàbc„Çí‰ΩøÁî®„Åõ„ÅöÔºâ
    local total_time=$(( zshenv_time + zshrc_time ))
    printf "ÂêàË®à: \033[38;5;82m%.6fÁßí\033[0m\n" $total_time
    
    # „Éï„Ç°„Ç§„É´„Éô„Éº„Çπ„ÅÆÂàÜÊûêÁµêÊûú
    if [ -f /tmp/sz_times/all_files.txt ]; then
      echo -e "\n\033[38;5;214m== „Éï„Ç°„Ç§„É´„ÅÆË™≠„ÅøËæº„ÅøÊôÇÈñì ==\033[0m"
      
      # ÊúÄ„ÇÇÊôÇÈñì„ÅÆ„Åã„Åã„Å£„Åü„Éï„Ç°„Ç§„É´„Çízsh„ÅÆÊ©üËÉΩ„Å†„Åë„ÅßÂá¶ÁêÜ
      echo -e "\033[38;5;226mÊúÄ„ÇÇÊôÇÈñì„ÅÆ„Åã„Åã„Å£„Åü„Éï„Ç°„Ç§„É´Ôºà‰∏ä‰Ωç10‰ª∂Ôºâ:\033[0m"
      
      # „Éï„Ç°„Ç§„É´„ÇíË™≠„ÅøËæº„Åø„ÄÅÁ©∫„ÅÆ„Ç®„É≥„Éà„É™„ÇíÈô§Â§ñ
      local files=()
      local times=()
      local idx=0
      
      while IFS=: read -r file time; do
        # Á©∫„Åß„Å™„ÅÑ„Éï„Ç°„Ç§„É´Âêç„ÅÆ„Åø„ÇíÂá¶ÁêÜ
        if [[ -n "$file" && "$file" != "-" && "$file" != ":" ]]; then
          files[$idx]="$file"
          times[$idx]="$time"
          ((idx++))
        fi
      done < /tmp/sz_times/all_files.txt
      
      # Á∞°ÊòìÁöÑ„Å™„ÇΩ„Éº„ÉàÔºàbc„Å™„Å©„ÅÆÂ§ñÈÉ®„Ç≥„Éû„É≥„Éâ„ÇíÂÆåÂÖ®„Å´‰Ωø„Çè„Å™„ÅÑÔºâ
      # ÂçòÁ¥î„Å™„Éê„Éñ„É´„ÇΩ„Éº„Éà - Êï∞ÂÄ§„ÇíÂ∞èÊï∞ÁÇπ„ÇíÈô§Âéª„Åó„Å¶Êï¥Êï∞ÊØîËºÉ
      for ((i=0; i<${#times[@]}; i++)); do
        for ((j=0; j<${#times[@]}-i-1; j++)); do
          # Â∞èÊï∞ÁÇπ„ÇíÈô§Âéª„Åó„Å¶Êï¥Êï∞„Å´Â§âÊèõÔºàÂçòÁ¥î„Å™ÊØîËºÉ„ÅÆ„Åü„ÇÅÔºâ
          local t1=$(printf "%.0f" $(( ${times[$j]} * 1000000 )))
          local t2=$(printf "%.0f" $(( ${times[$j+1]} * 1000000 )))
          
          if (( t1 < t2 )); then
            # ÂÄ§„ÅÆÂÖ•„ÇåÊõø„Åà
            local temp_time="${times[$j]}"
            local temp_file="${files[$j]}"
            times[$j]="${times[$j+1]}"
            files[$j]="${files[$j+1]}"
            times[$j+1]="$temp_time"
            files[$j+1]="$temp_file"
          fi
        done
      done
      
      # ‰∏ä‰Ωç10„Éï„Ç°„Ç§„É´„ÇíË°®Á§∫
      local count=0
      for ((i=0; i<${#files[@]} && i<10; i++)); do
        local file="${files[$i]}"
        local time="${times[$i]}"
        
        # „Éï„Ç°„Ç§„É´Âêç„ÇíÁü≠Á∏ÆÔºàË°®Á§∫Áî®Ôºâ
        local short_file="$file"
        if [ ${#file} -gt 40 ]; then
          short_file="...${file: -40}"
        fi
        
        # Ë°®Á§∫Ôºà„Ç∑„É≥„Éó„É´„Å™Êù°‰ª∂ÂàÜÂ≤êÔºâ
        if (( time >= 1.0 )); then
          echo -e "  $((i+1)). \033[38;5;196m$short_file: \033[1m${time}Áßí\033[0m \033[38;5;196m‚ö†Ô∏è „Éú„Éà„É´„Éç„ÉÉ„ÇØ!\033[0m"
        else
          echo -e "  $((i+1)). \033[38;5;39m$short_file: ${time}Áßí\033[0m"
        fi
        
        count=$((count+1))
      done
      
      # ÂêàË®à„Éï„Ç°„Ç§„É´Êï∞
      echo -e "\n\033[38;5;226mÂêàË®à ${#files[@]} „Éï„Ç°„Ç§„É´„ÅåË™≠„ÅøËæº„Åæ„Çå„Åæ„Åó„Åü\033[0m"
      
      # „Éú„Éà„É´„Éç„ÉÉ„ÇØ„Å®ÊîπÂñÑÊèêÊ°à
      echo -e "\n\033[38;5;214m== ÊîπÂñÑÊèêÊ°à ==\033[0m"
      
      # 1Áßí‰ª•‰∏ä„Åã„Åã„Çã„Éï„Ç°„Ç§„É´„Åå„ÅÇ„Çã„Åã„ÉÅ„Çß„ÉÉ„ÇØ
      local has_bottleneck=0
      local bottleneck_count=0
      
      for ((i=0; i<${#files[@]} && bottleneck_count<5; i++)); do
        local file="${files[$i]}"
        local time="${times[$i]}"
        
        if (( time >= 1.0 )); then
          has_bottleneck=1
          bottleneck_count=$((bottleneck_count+1))
          
          # „Éï„Ç°„Ç§„É´Âêç„Åã„ÇâÂü∫Êú¨Âêç„ÇíÂèñÂæó
          local base_file="${file##*/}"
          echo -e "\033[38;5;226m$base_file \033[38;5;196m(${time}Áßí)\033[0m \033[38;5;226m„ÅÆÊîπÂñÑÊñπÊ≥ï:\033[0m"
          
          # „Éï„Ç°„Ç§„É´„Çø„Ç§„Éó„Å´Âü∫„Å•„ÅèÊèêÊ°à
          case "$base_file" in
            *plugin*.zsh)
              echo -e "  - „Éó„É©„Ç∞„Ç§„É≥„ÅÆÊï∞„ÇíÊ∏õ„Çâ„Åô"
              echo -e "  - zinit„ÅßÈÅÖÂª∂„É≠„Éº„Éâ„ÇíË®≠ÂÆö„Åô„Çã"
              ;;
            *prompt*.zsh)
              echo -e "  - „Éó„É≠„É≥„Éó„Éà„Çí„Ç∑„É≥„Éó„É´„Å´„Åô„Çã"
              echo -e "  - GitÊÉÖÂ†±„Å™„Å©ÂãïÁöÑ„Å™Ë¶ÅÁ¥†„ÇíÊ∏õ„Çâ„Åô"
              ;;
            *sketchybar*.zsh)
              echo -e "  - sketchybar„ÅÆË®≠ÂÆö„ÇíËªΩÈáèÂåñ„Åô„Çã"
              echo -e "  - Êõ¥Êñ∞È†ªÂ∫¶„Çí‰∏ã„Åí„Çã"
              ;;
            *.zshrc|*.zshenv)
              echo -e "  - Ëµ∑ÂãïÊôÇ„ÅÆÂá¶ÁêÜ„ÇíÊúÄÂ∞èÈôê„Å´„Åô„Çã"
              echo -e "  - ÈÅÖÂª∂ÂàùÊúüÂåñ„ÇíÂ∞éÂÖ•„Åô„Çã"
              ;;
            *)
              echo -e "  - Âá¶ÁêÜ„ÇíÊúÄÈÅ©Âåñ„Åô„Çã"
              echo -e "  - Êù°‰ª∂‰ªò„ÅçË™≠„ÅøËæº„Åø„ÇíÊ§úË®é„Åô„Çã"
              ;;
          esac
        fi
      done
      
      if [ $has_bottleneck -eq 0 ]; then
        echo -e "\033[38;5;82mË®≠ÂÆö„Éï„Ç°„Ç§„É´„ÅÆË™≠„ÅøËæº„ÅøÈÄüÂ∫¶„ÅØËâØÂ•Ω„Åß„ÅôÔºÅ\033[0m"
      fi
    else
      echo -e "\033[38;5;196m„Éï„Ç°„Ç§„É´ÂàÜÊûê„Éá„Éº„Çø„Åå„ÅÇ„Çä„Åæ„Åõ„Çì\033[0m"
    fi
    
    # „ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„Éó
    /bin/rm -rf /tmp/sz_times 2>/dev/null
  fi
}

# „Éë„Éï„Ç©„Éº„Éû„É≥„Çπ„Éá„Éê„ÉÉ„Ç∞„ÇíÊúâÂäπ„Å´„Åô„ÇãÈñ¢Êï∞
function sz_debug() {
  export SZ_DEBUG=1
  sz
}
